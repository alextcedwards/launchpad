%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.16 (Build 20C69) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 554 599
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 554 599
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.75705135 0.66579396 0.36580279 sc
q
195.69104 272.77124 161.61792 231.45284 rc
195.69104 504.22406 m
357.30896 504.22406 l
357.30896 272.77124 l
195.69104 272.77124 l
195.69104 504.22406 l
h
f
2 w
0.59200001 0.59200001 0.59200001 sc
1 0 0 -1 195.69104 504.22406 cm
0 0 m
161.61792 0 l
161.61792 231.45284 l
0 231.45284 l
0 0 l
h
S
Q
0.22745098 0.23921569 0.26666668 sc
q
276.5 599 m
393.30823 599 488 504.30823 488 387.5 c
488 270.69177 393.30823 176 276.5 176 c
159.69177 176 65 270.69177 65 387.5 c
65 504.30823 159.69177 599 276.5 599 c
h
W*
0 0 554 599 rc
60 604 m
493 604 l
493 171 l
60 171 l
h
f
Q
0.75686276 0.66666669 0.36470589 sc
q
297.71259 308.68631 m
291.45871 288.73349 l
259.0726 288.73349 l
252.81873 308.68631 l
297.71259 308.68631 l
h
275.9389 496.24292 m
311.35516 445.36322 l
316.57776 424.48233 319.76544 403.15854 320.88144 381.69043 c
333.32794 377.79391 l
343.90891 374.48145 350.82733 364.36111 350.10696 353.33023 c
350.0791 352.94949 l
346.75299 311.94775 l
338.88168 329.12061 l
335.46463 336.57559 328.50064 341.68521 320.51801 342.80841 c
308.43716 342.80792 l
298.71024 311.67926 l
251.82108 311.67926 l
242.09216 342.80893 l
233.31567 342.80835 l
225.33316 341.68509 218.36931 336.5755 214.9523 329.12061 c
207.08101 311.94775 l
203.75488 352.94949 l
202.8481 364.12756 209.80345 374.44336 220.50606 377.79391 c
230.96457 381.06717 l
232.02301 402.18988 235.08685 423.17572 240.12105 443.74039 c
240.52263 445.36322 l
275.9389 496.24292 l
h
275.26566 488.2822 m
243.24278 443.17935 l
242.3336 439.24902 l
239.52338 426.96915 237.66501 417.54184 236.7585 410.96704 c
236.5956 409.73706 l
235.72491 402.88861 235.02837 392.87927 234.50597 379.70908 c
234.41197 377.25452 l
222.4948 373.67273 l
213.37601 370.93204 207.25795 362.4072 207.54907 352.92105 c
207.5639 352.54611 l
208.96553 323.59091 l
209.9682 327.05258 l
213.27434 338.46704 223.64694 346.36194 235.49768 346.53793 c
235.90224 346.54092 l
245.23807 346.54092 l
254.814 315.6698 l
266.78571 315.6698 l
254.814 348.57895 l
248.05428 366.84875 l
244.96318 375.20319 243.38077 384.04028 243.38077 392.94821 c
243.38077 401.41293 244.05818 409.86331 245.40614 418.21841 c
245.65097 419.69183 l
249.66754 443.17935 l
275.26566 488.2822 l
h
275.58643 437.22861 m
270.41168 437.22861 265.54309 435.91788 261.29471 433.61005 c
265.02652 435.36481 269.19431 436.34561 273.59113 436.34561 c
289.56961 436.34561 302.52274 423.39252 302.52274 407.41403 c
302.52274 391.43555 289.56961 378.48242 273.59113 378.48242 c
267.40958 378.48242 261.68079 380.42108 256.9798 383.72372 c
262.09253 379.67319 268.55701 377.25452 275.58643 377.25452 c
292.1478 377.25452 305.57346 390.68018 305.57346 407.24158 c
305.57346 423.80295 292.1478 437.22861 275.58643 437.22861 c
h
272.82935 431.39624 m
259.57385 431.39624 248.82816 420.65051 248.82816 407.39502 c
248.82816 394.13953 259.57385 383.3938 272.82935 383.3938 c
278.83789 383.3938 284.33072 385.60172 288.54095 389.25021 c
284.73767 386.51196 280.07004 384.89905 275.0257 384.89905 c
262.23676 384.89905 251.86928 395.26654 251.86928 408.05548 c
251.86928 420.84442 262.23676 431.21191 275.0257 431.21191 c
275.34341 431.21191 275.65964 431.20554 275.9743 431.19202 c
274.9451 431.32672 273.89532 431.39624 272.82935 431.39624 c
h
283.48398 429.59183 m
283.48398 424.3125 l
285.40796 423.33649 287.21274 422.04431 288.82108 420.436 c
293.03479 416.22226 295.07837 410.66016 294.95273 405.13834 c
296.81763 412.1268 295.00888 419.89169 289.52649 425.37405 c
287.72305 427.17752 285.67261 428.58344 283.48398 429.59183 c
h
W*
0 0 554 599 rc
198.67564 501.24292 m
355.15836 501.24292 l
355.15836 283.73349 l
198.67564 283.73349 l
h
f
Q
0.87058824 0.87058824 0.82352942 sc
q
77.322777 397.32843 m
82.932732 394.82648 87.793465 390.94742 91.47541 386.12082 c
93.955666 387.01324 96.630302 387.5 99.418633 387.5 c
112.36671 387.5 122.8632 377.00351 122.8632 364.05542 c
122.8632 360.57266 122.10379 357.26727 120.74151 354.29581 c
145.58168 347.20276 163.76651 324.33176 163.76651 297.21344 c
163.76651 288.80777 162.01936 280.81015 158.86841 273.56396 c
168.68271 271.04938 176.98265 264.7518 182.12288 256.31726 c
186.19646 259.73718 191.4514 261.79718 197.1875 261.79718 c
208.73531 261.79718 218.33311 253.44821 220.27397 242.45721 c
225.59807 245.25206 231.65987 246.83255 238.09081 246.83255 c
243.44867 246.83255 248.55032 245.7355 253.18336 243.75378 c
254.87962 250.9547 259.8981 256.87396 266.53223 259.80634 c
265.88684 261.1658 265.52594 262.6864 265.52594 264.29126 c
265.52594 268.18427 267.64957 271.58124 270.80157 273.38699 c
269.99411 274.46701 269.51651 275.80804 269.51651 277.26062 c
269.51651 280.84201 272.4198 283.74527 276.00119 283.74527 c
279.58255 283.74527 282.48584 280.84201 282.48584 277.26062 c
282.48584 275.80804 282.00824 274.46701 281.20151 273.38602 c
284.35278 271.58124 286.47641 268.18427 286.47641 264.29126 c
286.47641 262.6864 286.11551 261.1658 285.47043 259.80624 c
293.15631 256.40894 298.6738 249.00218 299.37109 240.23755 c
305.51053 244.40129 312.91885 246.83255 320.89505 246.83255 c
331.23679 246.83255 340.6239 242.74533 347.52921 236.0981 c
351.82544 241.42738 358.40897 244.83727 365.78891 244.83727 c
366.30145 244.83727 366.81012 244.82082 367.31448 244.78842 c
365.39038 248.1913 364.29245 252.1225 364.29245 256.31015 c
364.29245 269.25821 374.78894 279.75473 387.73703 279.75473 c
391.25452 279.75473 394.59109 278.98007 397.58545 277.59207 c
402.94083 292.10257 416.81015 302.49103 433.13315 302.69736 c
433.85651 302.6998 l
430.19162 310.40848 428.14151 319.035 428.14151 328.14032 c
428.14151 356.99643 448.73166 381.04346 476.02142 386.39081 c
476.02829 385.50473 l
476.02829 275.30829 386.69644 185.97641 276.5 185.97641 c
166.30356 185.97641 76.971695 275.30829 76.971695 385.50473 c
76.971695 388.81061 77.052094 392.09772 77.211044 395.36423 c
77.322777 397.32843 l
h
397.71344 444.6431 m
400.05771 439.22754 l
405.47327 436.88324 l
400.02365 434.57306 l
397.71344 429.12341 l
395.3855 434.5553 l
389.95361 436.88324 l
395.3855 439.21121 l
397.71344 444.6431 l
h
171.74763 470.03281 m
175.58372 461.17099 l
184.44554 457.3349 l
175.52797 453.55457 l
171.74763 444.63699 l
167.93826 453.52554 l
159.04974 457.3349 l
167.93826 461.14429 l
171.74763 470.03281 l
h
306.92807 534.43085 m
309.27234 529.01526 l
314.6879 526.67102 l
309.23828 524.36078 l
306.92807 518.91113 l
304.60013 524.34302 l
299.16824 526.67102 l
304.60013 528.99896 l
306.92807 534.43085 l
h
W*
0 0 554 599 rc
71.971695 539.43085 m
481.02829 539.43085 l
481.02829 180.97641 l
71.971695 180.97641 l
h
f
Q
0.22745098 0.23921569 0.26666668 sc
q
38.107143 41.96154 m
38.107143 53.637363 l
14.824176 53.637363 l
14.824176 90.03846 l
1.5 90.03846 l
1.5 41.96154 l
38.107143 41.96154 l
h
67.117149 41.96154 m
70.551216 50.546703 l
89.095177 50.546703 l
92.597923 41.96154 l
106.88364 41.96154 l
86.416603 90.381866 l
73.573196 90.381866 l
53.106163 41.96154 l
67.117149 41.96154 l
h
85.249023 60.917583 m
74.466057 60.917583 l
79.891876 74.585167 l
85.249023 60.917583 l
h
144.47881 41.06868 m
158.14639 41.06868 167.00629 47.868134 167.00629 63.39011 c
167.00629 90.03846 l
153.47606 90.03846 l
153.47606 62.978024 l
153.47606 56.247253 149.97331 53.087914 144.61618 53.087914 c
139.25903 53.087914 135.75629 56.384617 135.75629 63.32143 c
135.75629 90.03846 l
122.22607 90.03846 l
122.22607 63.046703 l
122.22607 48.005493 130.81123 41.06868 144.47881 41.06868 c
h
201.23607 41.96154 m
201.23607 68.335167 l
221.77179 41.96154 l
233.44762 41.96154 l
233.44762 90.03846 l
220.2608 90.03846 l
220.2608 64.626373 l
200.48058 90.03846 l
188.04926 90.03846 l
188.04926 41.96154 l
201.23607 41.96154 l
h
278.25433 41 m
288.89993 41 295.01257 45.60165 299.54553 51.85165 c
289.51807 58.994507 l
286.63345 55.491756 283.68015 53.156593 278.66641 53.156593 c
271.93564 53.156593 267.19662 58.78846 267.19662 66 c
267.19662 66.13736 l
267.19662 73.14286 271.93564 78.843407 278.66641 78.843407 c
283.26807 78.843407 286.4274 76.645607 289.17465 73.21154 c
299.20212 80.972527 l
294.94388 86.87912 288.62521 91 278.80377 91 c
264.24335 91 253.46037 80.010986 253.46037 66 c
253.46037 65.86264 l
253.46037 51.508244 264.51807 41 278.25433 41 c
h
331.71487 41.96154 m
331.71487 60.23077 l
348.81653 60.23077 l
348.81653 41.96154 l
362.14072 41.96154 l
362.14072 90.03846 l
348.81653 90.03846 l
348.81653 72.043953 l
331.71487 72.043953 l
331.71487 90.03846 l
318.39072 90.03846 l
318.39072 41.96154 l
331.71487 41.96154 l
h
397.12601 41.96154 m
397.12601 55.697803 l
403.71939 55.697803 l
415.66995 55.697803 424.39249 61.673077 424.39249 73.005493 c
424.39249 73.14286 l
424.39249 83.78846 416.56281 90.03846 404.40622 90.03846 c
383.80182 90.03846 l
383.80182 41.96154 l
397.12601 41.96154 l
h
403.44467 66.13736 m
397.12601 66.13736 l
397.12601 78.843407 l
403.37601 78.843407 l
408.18369 78.843407 411.0683 76.645607 411.0683 72.524727 c
411.0683 72.38736 l
411.0683 68.609894 408.18369 66.13736 403.44467 66.13736 c
h
448.52612 41.96154 m
451.96017 50.546703 l
470.50412 50.546703 l
474.0069 41.96154 l
488.2926 41.96154 l
467.82556 90.381866 l
454.98215 90.381866 l
434.51514 41.96154 l
448.52612 41.96154 l
h
466.65799 60.917583 m
455.875 60.917583 l
461.30084 74.585167 l
466.65799 60.917583 l
h
524.37677 41.96154 m
541.68445 41.96154 551.78064 52.263737 551.78064 66.13736 c
551.78064 66.274727 l
551.78064 80.148354 541.82184 90.03846 524.65149 90.03846 c
506.10754 90.03846 l
506.10754 41.96154 l
524.37677 41.96154 l
h
524.85754 53.774727 m
519.4317 53.774727 l
519.4317 78.225273 l
524.85754 78.225273 l
532.82458 78.225273 538.11304 73.760986 538.11304 66.06868 c
538.11304 65.93132 l
538.11304 58.17033 532.82458 53.774727 524.85754 53.774727 c
h
W
0 0 554 599 rc
-3.5 96 m
556.78064 96 l
556.78064 36 l
-3.5 36 l
h
f
Q
0.22745098 0.23921569 0.26666668 sc
q
243.785 110.7 m
243.785 135.153 l
252.95 135.153 l
252.95 138 l
231.5 138 l
231.5 135.153 l
240.66499 135.153 l
240.66499 110.7 l
243.785 110.7 l
h
269.26703 110.7 m
269.26703 122.985 l
285.02304 122.985 l
285.02304 110.7 l
288.10403 110.7 l
288.10403 138 l
285.02304 138 l
285.02304 125.871 l
269.26703 125.871 l
269.26703 138 l
266.18604 138 l
266.18604 110.7 l
269.26703 110.7 l
h
323.21909 110.7 m
323.21909 113.508 l
306.37109 113.508 l
306.37109 123.063 l
321.26907 123.063 l
321.26907 125.871 l
306.37109 125.871 l
306.37109 135.192 l
323.02408 135.192 l
323.02408 138 l
303.2901 138 l
303.2901 110.7 l
323.21909 110.7 l
h
W
0 0 554 599 rc
226.5 143 m
328.21909 143 l
328.21909 105.7 l
226.5 105.7 l
h
f
Q
0.22745098 0.23921569 0.26666668 sc
q
338.5 123 215 3 rc
333.5 131 m
558.5 131 l
558.5 118 l
333.5 118 l
h
f
Q
q
553.50134 3.501363 m
553.50134 0.50136304 l
0.49863699 -0.001363016 l
0.49863699 2.9986358 l
553.50134 3.501363 l
h
W
0 0 554 599 rc
-4.5013628 8.5013628 m
558.50134 8.5013628 l
558.50134 -5.0013628 l
-4.5013628 -5.0013628 l
h
f
Q
q
0 123 215 3 rc
-5 131 m
220 131 l
220 118 l
-5 118 l
h
f
ep
end
%%Trailer
%%EOF
